"""
__author__="Alihan Küçük"
"""
import numpy as np
import matplotlib.pyplot as plt

def dummy(parameter):
    dummy_parameter = parameter + 5
    return dummy_parameter


def initialize_parameters(dimension):   
    weight = np.full((dimension,1),0.01)    
    bias = 0.0 
    return weight, bias
w, b = initialize_parameters(4096)
print (w,"\n", b)
print (w.shape)
def sigmoid(z):
    y_pred = 1 / (1+np.exp(-z))
    return y_pred
def forward_backward_propagation(weight, bias, x_train, y_train):    
    z = np.dot(weight.T, x_train) + bias
    y_pred = sigmoid(z)
    loss = -y_train*np.log(y_pred) - (1-y_train)*np.log(1-y_pred)
    cost = (np.sum(loss)) / x_train.shape[1]       
    derivative_weight = (np.dot(x_train,((y_pred-y_train).T)))/x_train.shape[1] 
    derivative_bias = np.sum(y_pred-y_train)/x_train.shape[1]
    gradients = {"derivative_weight": derivative_weight,"derivative_bias": derivative_bias}    
    return cost, gradients
def update(weight, bias, x_train, y_train, learning_rate, number_of_iterarion):
    cost_list = []
    cost_list2 = []
    index = []
  
    for i in range(number_of_iterarion):
      
        cost,gradients = forward_backward_propagation(weight,bias,x_train,y_train)
        cost_list.append(cost)
        
        weight = weight - learning_rate * gradients["derivative_weight"]
        bias = bias - learning_rate * gradients["derivative_bias"]       
        if i % 10 == 0:
            cost_list2.append(cost)
            index.append(i)
            print ("Cost after iteration %i: %f" %(i, cost))
    parameters = {"weight": weight,"bias": bias}
    plt.plot(index,cost_list2)
    plt.xticks(index,rotation='vertical')
    plt.xlabel("Number of Iterarion")
    plt.ylabel("Cost")
    plt.show()
    return parameters, gradients, cost_list


def predict(weight,bias,x_test):

  
    for i in range(z.shape[1]):
        if z[0,i]<= 0.5:
            Y_prediction[0,i] = 0
        else:
            Y_prediction[0,i] = 1
    return Y_prediction

def log_reg(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):
  
    dimension =  x_train.shape[0]
    weight,bias = initialize_parameters(dimension)
    
    parameters, gradients, cost_list = update(weight, bias, x_train, y_train, learning_rate, num_iterations)
    
    y_prediction_test = predict(parameters["weight"],parameters["bias"],x_test)
    y_prediction_train = predict(parameters["weight"],parameters["bias"],x_train)

  
    
    print("train accuracy: {} %".format(100 - np.mean(np.abs(y_prediction_train - y_train)) * 100))
    print("test accuracy: {} %".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))


x_l = np.load('veriler/SLD/X.npy')
Y_l = np.load('veriler/SLD/Y.npy')
img_size = 64
X = np.concatenate((x_l[204:409], x_l[822:1027] ), axis=0) # from 0 to 204 is zero sign and from 205 to 410 is one sign 
zero = np.zeros(205)
one = np.ones(205)
Y = np.concatenate((zero, one), axis=0).reshape(X.shape[0],1)
print("X shape: " , X.shape)
print("Y shape: " , Y.shape)

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.15, random_state=0)
number_of_train = X_train.shape[0]
number_of_test = X_test.shape[0]
X_train_flatten = X_train.reshape(number_of_train,X_train.shape[1]*X_train.shape[2])
X_test_flatten = X_test .reshape(number_of_test,X_test.shape[1]*X_test.shape[2])
print("X train flatten",X_train_flatten.shape)
print("X test flatten",X_test_flatten.shape)
x_train = X_train_flatten.T
x_test = X_test_flatten.T
y_train = Y_train.T
y_test = Y_test.T
print("x train: ",x_train.shape)
print("x test: ",x_test.shape)
print("y train: ",y_train.shape)
print("y test: ",y_test.shape)


log_reg(x_train, y_train, x_test, y_test, learning_rate = 0.01, num_iterations = 200)

